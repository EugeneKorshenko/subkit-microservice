#!/usr/bin/env node

var fs = require('fs')
    ,program = require('commander')
    ,uuid = require('node-uuid')
    ,AWS = require('aws-sdk');

var hostsFile = "hosts.json";
var proxyFile = "proxy.json";
var serverFile = "sk.json";
var defaultsFile = "defaults.json";

AWS.config.loadFromPath(__dirname + '/awsoptions.json');
var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version,
    ec2 = new AWS.EC2.Client(),
    dns = new AWS.Route53.Client();

function saveServerConfig(data){
  fs.writeFileSync(__dirname + "/" + serverFile, JSON.stringify(data), 'utf8');
}
function saveProxy(data){
  fs.writeFileSync(__dirname + "/" + proxyFile, JSON.stringify(data), 'utf8');
}
function saveHosts(data){
  fs.writeFileSync(__dirname + "/" + hostsFile, JSON.stringify(data), 'utf8');
}
function saveAppConfig(name, data){
  fs.writeFileSync(__dirname + "/" + name + ".json", JSON.stringify(data), 'utf8');
}

function acquireHost(){
  var resources = require("./" + hostsFile);
  var result = resources[0];
  resources.splice(0, 1);
  saveHosts(resources);
  return result;
}
function registerProxyHost(host, port){
  var serverConfig = require("./" + serverFile);
  var proxy = require("./" + proxyFile);
  var dnsHostName = host + "." + serverConfig.proxyDomain;
  proxy.router[dnsHostName] = "127.0.0.1" + ":" + port; //serverConfig.ip
  saveProxy(proxy);
  return dnsHostName;
}
function registerDNSHost(host, done){
  var serverConfig = require("./" + serverFile),
      zoneInfo = {
        HostedZoneId: serverConfig.dnsZoneId,
        ChangeBatch: { Changes: [] }
      };
    var dnsHostName = host + ".";
    zoneInfo.ChangeBatch.Changes.push({
      Action: "CREATE",
      ResourceRecordSet: {
        ResourceRecords: [{
          Value: serverConfig.ip
        }],
        Name: dnsHostName,
        Type: "A",
        TTL: 300,
      }
    });
  dns.changeResourceRecordSets(zoneInfo, function(err, result){
    if(err !== null) return done(err);
    done(null, result);
  });
}
function copyProxyConfig(done){
  var serverConfig = require("./" + serverFile);
  var loginInfo = "ubuntu@" + serverConfig.ip;
  var $p = require('procstreams');
  
  $p('scp -2 -r -p -i' + serverConfig.pem + ' ' + './'+proxyFile + ' ' + loginInfo + ':~/proxy/proxy.json')
  .out()
  .on('error', function(err) {
    console.log(err);
    done(err);
  })
  .on('exit', function() {
    console.log("new proxy config copied");
    done(null, "ok");
  });
}
function restartProxy(done){
  var serverConfig = require("./" + serverFile);
  var loginInfo = "ubuntu@" + serverConfig.ip;
  var $p = require('procstreams');
  
  $p('ssh -2 -i ' + serverConfig.pem + ' ' + loginInfo + ' ' + "sudo forever restart ~/proxy/server.js")
  .out()
  .on('error', function(err) {
    console.log(err);
    done(err);
  })
  .on('exit', function() {
    console.log("proxy process restarted");
    done(null, "ok");
  });
}
function appCopyInstall(name, done){
  var serverConfig = require("./" + serverFile);
  var loginInfo = "ubuntu@" + serverConfig.ip;
  var $p = require('procstreams');
  var path = serverConfig.basePath + "/" + name;
  $p('ssh -2 -i ' + serverConfig.pem + ' ' + loginInfo + ' ' + "cp -r ~/lite " + path)
  .out()
  .on('error', function(err) {
    console.log(err);
    done(err);
  })
  .on('exit', function() {
    console.log("SubKit Lite install successful");
    done(null, "ok");
  });
}
function copyAppConfig(name, port, done){
  var serverConfig = require("./" + serverFile);
  var loginInfo = "ubuntu@" + serverConfig.ip;
  var $p = require('procstreams');
  var path = serverConfig.basePath + "/" + name;
  var defaultsConfig = require("./" + defaultsFile);
  
  defaultsConfig.api.apiKey = uuid.v4();
  defaultsConfig.api.url = "http://" + name + "." + serverConfig.proxyDomain;
  defaultsConfig.app.id = uuid.v4();
  defaultsConfig.app.port = port;
  defaultsConfig.storageModule.dbPath = "./db";

  saveAppConfig(name, defaultsConfig);
  
  $p('scp -2 -r -p -i' + serverConfig.pem + ' ' + './'+name+'.json ' + loginInfo + ':'+path+'/config.json')
  .out()
  .on('error', function(err) {
    console.log(err);
    done(err);
  })
  .on('exit', function() {
    console.log("config for " + name + ":" + port + " copied");
    done(null, "ok");
  });
}
function startApp(name, done){
  var serverConfig = require("./" + serverFile);
  var loginInfo = "ubuntu@" + serverConfig.ip;
  var $p = require('procstreams');
  var path = serverConfig.basePath + "/" + name;

  $p('ssh -2 -i ' + serverConfig.pem + ' ' + loginInfo + ' ' + "sudo forever start --sourceDir " + path + " -p "+ path + " server.js")
  .out()
  .on('error', function(err) {
    console.log(err);
    done(err);
  })
  .on('exit', function() {
    console.log("App " + name + " started!");
    done(null, "ok");
  });
}



  // .then('ssh -2 -i ' + serverConfig.pem + ' ' + loginInfo + ' ' + "cd " + serverConfig.basePath + "; npm install git+ssh://git@github.com:SubKit/" + appType + ".git")
  // .out()
  // .then('scp -2 -r -p -i' + serverConfig.pem + ' ' + resourceFilePath + ' ' + loginInfo + ':~/apps/' + appId + "/node_modules/" + appType + "/config.json")
  // .out()
  // .then('ssh -2 -i ' + serverConfig.pem + ' ' + loginInfo + ' ' + "sudo forever start ~/apps/" + appId + "/node_modules/" + appType + "/server.js; exit;")
  // .out()


program
  .version(version)
  .usage('[options] <url>')
  .option('-c, --create', 'create new app')
  .option('-p, --protocol <data>', 'optional ...')
  .parse(process.argv);

if (program.create) {
  var host = acquireHost();
  var proxyEntry = registerProxyHost(host.host, host.port);
  registerDNSHost(proxyEntry, function(err, data){
    if(err) {
      console.log(err);
      process.exit(-1)
    }
    copyProxyConfig(function(err, data){
      restartProxy(function(err, data){
        appCopyInstall(host.host, function(err, data){
          copyAppConfig(host.host, host.port, function(err, data){
            startApp(host.host, function(err, data){
              process.exit(0);
            });
          });
        });
      });
    });
  });

  (function loop() {
    setImmediate(loop)
  })();  
}
else if (program.protocol) {
  console.log(program.protocol);
}
else {
	process.exit(-1);
}