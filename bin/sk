#!/usr/bin/env node
//ssh -2 -i subkit.pem ubuntu@ec2-54-228-188-160.eu-west-1.compute.amazonaws.com

var fs = require('fs')
	,program = require('commander')
  ,AWS = require('aws-sdk')
	,util = require('util')
	,events = require('events')
  ,$p = require('procstreams');

var hostsFile = "hosts.json";
var proxyFile = "proxy.json";
var serverFile = "server.json";

AWS.config.loadFromPath(__dirname + '/awsoptions.json');
var ec2 = new AWS.EC2.Client(),
    dns = new AWS.Route53.Client();

function saveServerConfig(data){
  fs.writeFileSync(__dirname + "/" + serverFile, JSON.stringify(data), 'utf8');
}
function saveProxy(data){
  fs.writeFileSync(__dirname + "/" + proxyFile, JSON.stringify(data), 'utf8');
}
function saveHosts(data){
  fs.writeFileSync(__dirname + "/" + hostsFile, JSON.stringify(data), 'utf8');
}

function acquireHost(){
  var resources = require("./" + hostsFile);
  var result = resources[0];
  resources.splice(0, 1);
  saveHosts(resources);
  return result;
}

function registerProxyHost(host, port){
  var serverConfig = require("./" + serverFile);
  var proxy = require("./" + proxyFile);
  var dnsHostName = host + "." + serverConfig.proxyDomain;
  proxy.router[dnsHostName] = serverConfig.ip + ":" + port;
  saveProxy(proxy);
  return dnsHostName;
}

function registerDNSHost(host, done){
  var serverConfig = require("./" + serverFile),
      zoneInfo = {
        HostedZoneId: serverConfig.dnsZoneId,
        ChangeBatch: { Changes: [] }
      };
    var dnsHostName = host + "." + serverConfig.proxyDomain + ".";
    zoneInfo.ChangeBatch.Changes.push({
      Action: "CREATE",
      ResourceRecordSet: {
        ResourceRecords: [{
          Value: serverConfig.ip
        }],
        Name: dnsHostName,
        Type: "A",
        TTL: 300,
      }
    });
  dns.changeResourceRecordSets(zoneInfo, function(err, result){
    if(err !== null) return done(error);
    done(null, result);
  });
}

var version = JSON.parse(fs.readFileSync(__dirname + '/../package.json', 'utf8')).version;
program
  .version(version)
  .usage('[options] <url>')
  .option('-c, --create', 'create new app')
  .option('-p, --protocol <data>', 'optional ...')
  .parse(process.argv);

if (program.create) {
  var host = acquireHost();
  console.log(host);
  var proxyEntry = registerProxyHost(host.host, host.port);
  console.log(proxyEntry);
  registerDNSHost(proxyEntry, function(err, data){
    console.log(err);
    console.log(data);
  });
}
if (program.protocol) {
  console.log(program.protocol);
}
else {
	process.exit(-1);
}